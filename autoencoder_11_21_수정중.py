#!/usr/bin/env python
# coding: utf-8

# In[1]:


# -*- coding: utf-8 -*-

"""

ai_model(1)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10kFaZOP4q3OfXsp8vxHKHH8hqozeQhT5
    
"""



import os
import torch
import torchvision
from torch import nn
from torch.autograd import Variable
from torch.utils.data import Dataset, DataLoader
from torchtext import data
from torchtext.data import TabularDataset
import numpy as np
import pandas as pd

num_epochs = 150
batch_size = 50

learning_rate = 1e-3

#t1_data = pandas dataframe
t1_data = pd.read_csv('pre4.csv')


# In[2]:


nb_users = int(max(t1_data.iloc[:,0])) + 1 #사용자의 수 +1
nb_foods = int(max(t1_data.iloc[:,1])) + 1 #음식 종류의 수 만약 인덱스 0부터 주었다면 +1
print(nb_foods)


# In[3]:


#pandas dataframe -> numpy
t1_data = t1_data.values

print(t1_data)


# In[4]:


#numpy array -> pytorch tensor
def convert(data):
    new_data = []
    for id_users in range(0, nb_users): #총 사용자 수많큼 반복해라
        id_foods = data[:,1][data[:,0] == id_users] # user가 본 영화들
        id_foods = id_foods.astype(int) # user가 본 영화들의 별점
        id_ratings = data[:,2][data[:,0] == id_users]
        ratings = np.zeros(nb_foods) #영화 숫자만큼 zero 배열 만들어줌
        ratings[id_foods] = id_ratings #id_movies영화갯수 1부터 하려고 -1을 해줌/ id_movies - 1번째 영화 /ratings[id_movies - 1]: n번째 영화 별점이 몇점인지 쭉 나열
        ratings = ratings.astype(float)
        new_data.append(list(ratings)) #전체영화 zero에 배열되있는것에 점수 넣어줌
    return new_data


# In[5]:


t1_data


# In[6]:


t2_data = convert(t1_data)
t2_data = np.asarray(t2_data)


# In[7]:


t2_data #아이디1[영화1별점,영화2별점,영화3별점,영화4별점], 아이디2[영화1,영화2,영화3,영화4], 아이디3[]


# In[8]:


# Numpy array to Pytorch Tensor
tensor = torch.FloatTensor(t2_data)


# In[9]:



# class FoodDataset(Dataset):
#     def __init__(self):
#         pass

#     def __len__(self):
#         return len(tensor)

#     def __getitem__(self, index):
#         return tensor[index]


# In[10]:


# dataset = FoodDataset()
num_train_dataset = int(len(tensor) * 0.8)
num_test_dataset = len(tensor) - num_train_dataset


# In[11]:


train_dataset, test_dataset = torch.utils.data.random_split(tensor, [num_train_dataset, num_test_dataset])


# In[12]:


train_dataset


# In[13]:



dataloader = DataLoader(tensor, batch_size=batch_size, shuffle=True)

class autoencoder(nn.Module):
  def __init__(self):
    super(autoencoder, self).__init__()
    self.encoder = nn.Sequential(
        nn.Linear(309, 200),
        nn.Linear(200, 100),        
        nn.ReLU(True), #이건 왜쓴거지? 모르겠음
        nn.Linear(100, 1))
    self.decoder = nn.Sequential(
        nn.Linear(1, 100),
        nn.Linear(100, 200),        
        nn.ReLU(True),
        nn.Linear(200, 309), nn.Tanh())
    
  def forward(self, x):
    x = self.encoder(x)
    x = self.decoder(x)
    return x

model = autoencoder()
criterion = nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-3)

for epoch in range(num_epochs):
  for data in dataloader:
    output = model(data)
    loss = criterion(output, data)
    
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    
  print('epoch [{}/{}], loss:{:.4f}'
       .format(epoch +1, num_epochs, loss.item()))


# In[14]:


aaa=[]
lists = map(int, input().split(','))
print(lists)
arr=[0 for i in range(1, 310)]
count=0
for i in lists:
    if count<4:
        arr[i]=5
    elif count<8:
        arr[i]=3
    elif count<12:
        arr[i]=1
    count+=1

print(arr)

aaa.append(arr)
bb=torch.FloatTensor(aaa)
bb


# In[15]:


new_user_input = bb
output = model(new_user_input)

output = (output+1)
print(output)


# In[16]:


print("이 사람한테 맞는 최고의 음식 5")
# x[np.argsort(-x)]
sort_food_id = np.argsort(-output.detach().numpy())  
sort_food_id

print(sort_food_id[0][:5]) 


# In[17]:


print(sort_food_id[0])


# In[18]:


sort_food_id


# In[19]:


# array to list
sort_food_id_list=sort_food_id.tolist()
sort_food_id_list


# In[20]:


# 차원 줄이기
food_real_list=np.ravel(sort_food_id_list, order='C').tolist()
food_real_list


# In[22]:


import pandas as pd
file=pd.read_excel('food_label.xlsx')
file[:5]


# In[23]:


type(file['계란'][0])


# In[47]:


# 제외시켜라
rm_list=set()
list_remove= ['오이','가지','생선','견과류']

for j in list_remove:
  for i in range(309):
    if file[j][i]==1:
      rm_list.add(file['f_num'][i])


# In[25]:


print(type(rm_list))


# In[40]:


#중복된거 제거
rm_real_list=list(rm_list)
rm_real_list


# In[81]:


# for i in range(len(rm_real_list)):
#     food_real_list.remove(rm_real_list[i])
include=[33,304,3,4]

for i in food_real_list:
    if i in rm_list or i in include:
        food_real_list.remove(i)
        
        
        
#음식 제외한거(전체 - 싫어하는거)
top_10=food_real_list[:10]


# In[82]:


top_10


# In[89]:


# 랜덤하게 리스트 중에서 2개 뽑아라
import random



count1 = 2
sampleList1 = include
random_list1=random.sample(sampleList1, count1)


count = 4
sampleList = top_10
random_list2=random.sample(sampleList, count)


final_list=random_list1+random_list2
final_list

